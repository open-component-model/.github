# This central workflow is used to run a Black Duck SCA scan on a repository.
# It is triggered by the Trigger Blackduck Scan workflow,
# which is defined in the other repositories' .github/workflows
name: Execute Blackduck SCA Scan

on:
  workflow_call:
    inputs:
      detector_search_depth:
        description: 'Optional detector search depth for the Black Duck scan.'
        required: false
        type: number
        default: 0 # default is required as otherwise Blackduck will throw an error with empty string
      event_type: 
        description: 'The event type of the triggering workflow.'
        required: true
        type: string
    secrets:
      BLACKDUCK_API_TOKEN:
        required: true
      BLACKDUCK_URL:
        required: true

permissions:
  contents: read 

jobs:
  build:
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       
      - name: Run Black Duck Full SCA Scan (Push, Manual Trigger or Schedule)
        if: ${{ inputs.event_type != 'pull_request_target' }} 
        uses: blackduck-inc/black-duck-security-scan@66ede8f408f5c8eb3affd1c8cdfa6eb321c3aa97 #v2.1.0
        env:
          DETECT_PROJECT_USER_GROUPS: opencomponentmodel
          DETECT_PROJECT_VERSION_DISTRIBUTION: opensource
          DETECT_BLACKDUCK_SIGNATURE_SCANNER_ARGUMENTS: '--min-scan-interval=0'
          DETECT_DETECTOR_SEARCH_DEPTH: ${{ inputs.detector_search_depth }}
          NODE_TLS_REJECT_UNAUTHORIZED: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          blackducksca_url: ${{ secrets.BLACKDUCK_URL }}
          blackducksca_token: ${{ secrets.BLACKDUCK_API_TOKEN }}
          blackducksca_scan_full: true
          blackducksca_scan_failure_severities: 'BLOCKER,CRITICAL'

      - name: Run Black Duck SCA Scan (Pull Requests)
        if: ${{ inputs.event_type == 'pull_request_target' }} 
        uses: blackduck-inc/black-duck-security-scan@66ede8f408f5c8eb3affd1c8cdfa6eb321c3aa97 #v2.1.0
        env:
          DETECT_PROJECT_USER_GROUPS: opencomponentmodel
          DETECT_PROJECT_VERSION_DISTRIBUTION: opensource
          DETECT_DETECTOR_SEARCH_DEPTH: ${{ inputs.detector_search_depth }}
          NODE_TLS_REJECT_UNAUTHORIZED: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          blackducksca_url: ${{ secrets.BLACKDUCK_URL }}
          blackducksca_token: ${{ secrets.BLACKDUCK_API_TOKEN }}
          blackducksca_scan_full: false
          # Following parameters are required to be set to avoid failing the build even if policy violations are found.
          # THEY SHOULD BE REMOVED ONCE WE TRIAGED ALL FINDINGS AND THE SCAN RESULTS ARE STABLE.
          blackducksca_scan_failure_severities: 'NONE'
          mark_build_status: success


      # Check Black Duck status and upload status file as artifact.
      # This step is required to be set as always(), so the status file is uploaded even if the Black Duck scan fails.
      - name: Check Black Duck status
        if: always()
        id: check_blackduck_status
        shell: bash
        run: |
          # Use find to locate status file
          STATUS_FILE=$(find "$GITHUB_WORKSPACE/.bridge/Blackduck SCA Detect Execution/detect/runs" -name "status.json" | head -n 1)
      
          if [ -z "$STATUS_FILE" ]; then
            echo "::warning file=status.json::No Black Duck status file found"
            exit 1
          fi

          echo "status_file_path=$STATUS_FILE" >> "$GITHUB_OUTPUT"
          ISSUE_COUNT=$(jq '.issues | length' "$STATUS_FILE")
          
          if [[ "$ISSUE_COUNT" -eq 0 ]]; then
            echo "Black Duck scan successful, no technical issues during scan."
          else
            # Technical issues with scan exist
            echo "::error file=$STATUS_FILE::Black Duck scan had technical issues:"
            
            # Extract and print issue details
            jq -r '.issues[] | "\(.type): \(.title)\n  Details: \((.messages | if type == "string" then [.] else . end) | join("; "))"' "$STATUS_FILE" | \
            while IFS= read -r line; do
              echo "::error::$line"
            done
            echo
            echo "Black Duck Overall Status:"
            jq -r '.overallStatus[0].key + " - " + .overallStatus[0].status' "$STATUS_FILE"
            exit 1
          fi
            
      - name: Upload Blackduck status file
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: status-json
          path: ${{ steps.check_blackduck_status.outputs.status_file_path }}
       